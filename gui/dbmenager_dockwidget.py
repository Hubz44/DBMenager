# -*- coding: utf-8 -*-
"""
/***************************************************************************
 DBMenagerDockWidget
                                 A QGIS plugin
 Menage your database!
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                             -------------------
        begin                : 2019-06-11
        git sha              : $Format:%H$
        copyright            : (C) 2019 by Jakub Skowro≈Ñski
        email                : skowronski.jakub97@gmail.com
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""

import os

from PyQt5 import QtGui, QtWidgets, uic
from PyQt5.QtCore import pyqtSignal
from PyQt5.QtSql import QSqlQuery

from .useraction import DBUserAction

# from .userAction_dialog import UserActionDialog

FORM_CLASS, _ = uic.loadUiType(os.path.join(
    os.path.dirname(__file__), 'dbmenager_dockwidget_base.ui'))


class DBMenagerDockWidget(QtWidgets.QDockWidget, FORM_CLASS):

    closingPlugin = pyqtSignal()

    def __init__(self, iface, database, parent=None):
        """Constructor."""
        super(DBMenagerDockWidget, self).__init__(parent)
        # Set up the user interface from Designer.
        # After setupUI you can access any designer object by doing
        # self.<objectname>, and you can use autoconnect slots - see
        # http://doc.qt.io/qt-5/designer-using-a-ui-file.html
        # #widgets-and-dialogs-with-auto-connect
        
        self.userDialog = None
        self.actonType = None
        self.iface = iface 
        self.db = database
        self.setupUi(self)

        self.logOutBttn.clicked.connect(self.closeConnection)
        self.addUserBttn.clicked.connect(self.addUser)
        
        self.tablesComboBox.addItems(self.db.tables())
        self.tablesComboBox.currentTextChanged.connect(self.fillUsersTable)
    
        

    def closeEvent(self, event):
        self.closingPlugin.emit()
        event.accept()

    def closeConnection(self):
        self.db.close()
        self.close()

    def fillUsersTable(self, text):

        table = text
        users = []
        
        userQuery = QSqlQuery(self.db)
        userQuery.exec_(
            """SELECT u.usename as "Username"
            FROM pg_catalog.pg_user u """
            )
        
        while userQuery.next():
            record = userQuery.record()
            uname = str(record.value('Username'))
            users.append(uname)

        self.usersTable.setRowCount(len(users))
        self.usersTable.setColumnCount(2)
        self.usersTable.setHorizontalHeaderLabels(['Users', 'Privilages'])

        privilageQuery = QSqlQuery(self.db)
        
        for idx, user in enumerate(users):
            privilages = ''
            privilageQuery.exec_(
                f"""SELECT grantee, privilege_type as "privilage"
                FROM information_schema.role_table_grants 
                where table_name = '{table}' and grantee = '{user}' """
            )

            while privilageQuery.next():
                record = privilageQuery.record()
                privilage = str(record.value('privilage'))
                privilages += f'{privilage[0]} '
            
            print(privilages)
            self.usersTable.setItem(idx, 0, QtWidgets.QTableWidgetItem(user))
            self.usersTable.setItem(idx, 1, QtWidgets.QTableWidgetItem(privilages))

    def addUser(self):
        
        self.actionType = 'addUser'
        self.userDialog = DBUserAction(self)
        self.userDialog.show()
        