# -*- coding: utf-8 -*-
"""
/***************************************************************************
 DBMenagerDockWidget
                                 A QGIS plugin
 Menage your database!
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                             -------------------
        begin                : 2019-06-11
        git sha              : $Format:%H$
        copyright            : (C) 2019 by Jakub Skowro≈Ñski
        email                : skowronski.jakub97@gmail.com
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""


from PyQt5 import uic
from PyQt5 import QtWidgets
from PyQt5.QtSql import QSqlQuery

import os
# This loads your .ui file so that PyQt can populate your plugin with the elements from Qt Designer
FORM_CLASS, _ = uic.loadUiType(os.path.join(
    os.path.dirname(__file__), 'useraction_dialog_base.ui'))


class DBUserAction(QtWidgets.QDialog, FORM_CLASS):

    username = None
    password = None
    privilages = []

    def __init__(self, parent, parents=None):
        """Constructor."""
        super(DBUserAction, self).__init__(parents)
        # Set up the user interface from Designer through FORM_CLASS.
        # After self.setupUi() you can access any designer object by doing
        # self.<objectname>, and you can use autoconnect slots - see
        # http://qt-project.org/doc/qt-4.8/designer-using-a-ui-file.html

        self.setupUi(self)

        self.parent = parent
        self.acceptBttn.clicked.connect(self.action)
        self.cancelBttn.clicked.connect(self.closeWidnows)

    def closeWidnows(self):
        """ Closing dialog window """
        self.reject()

    def action(self, actionType):
        """ Do specific action that has been chosen by user in dockwidget """
        
        #Create privilages list and if element is checked in checkbox add it to the list
        self.privilages = []
        for cb in self.findChildren(QtWidgets.QCheckBox):
            if cb.isChecked() and cb.text() not in self.privilages:
                self.privilages.append(cb.text())

        self.username = self.usernameIn.displayText()
        self.password = self.passwordIn.displayText()
        table = self.parent.tablesComboBox.currentText()

        #Create string of privilages that will be later used in query
        strPrivilages = ''
        for idx, privilage in enumerate(self.privilages):
            if idx < len(self.privilages)-1:
                strPrivilages += f'{privilage},'
            else:
                strPrivilages += f'{privilage}'

        #Check which button was pressed in main dockwidget
        if self.parent.actionType == 'createUser':
            addUserQuery = QSqlQuery(self.parent.db)
            addUserQuery.exec_(
            f"""CREATE USER {self.username} WITH PASSWORD '{self.password}';
                GRANT {strPrivilages} ON {table} TO {self.username}"""
                )
            #TODO CREATE USER EVEN IF NONE PRIVILAGES WAS CHECKED 
        elif self.parent.actionType == 'alterUser' and self.parent.usersTable.selectedItems():
            selectedUser = self.parent.usersTable.selectedItems()[0].text()
            # print(selectedUser, strPrivilages)
            
            query = QSqlQuery(self.parent.db)

            #Check what privilages superuser want to grant or revoke to selected user
            if self.privilages:
                query.exec_(
                f"""REVOKE ALL PRIVILEGES ON ALL TABLES IN SCHEMA public FROM {selectedUser};
                    GRANT {strPrivilages} ON {table} TO {selectedUser}"""
                )
            else:
                 query.exec_(
                f"""REVOKE ALL PRIVILEGES ON ALL TABLES IN SCHEMA public FROM {selectedUser}"""
                )
            #TODO PASSWORD CHANGE
        
        #Refresh table
        self.parent.fillUsersTable(table)
        self.accept()
